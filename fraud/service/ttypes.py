#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TransactionData(object):
    """
    Attributes:
     - type
     - amount
     - nameOrig
     - oldBalanceOrig
     - newBalanceOrig
     - nameDest
     - oldBalanceDest
     - newBalanceDest
     - timestamp

    """


    def __init__(self, type=None, amount=None, nameOrig=None, oldBalanceOrig=None, newBalanceOrig=None, nameDest=None, oldBalanceDest=None, newBalanceDest=None, timestamp=None,):
        self.type = type
        self.amount = amount
        self.nameOrig = nameOrig
        self.oldBalanceOrig = oldBalanceOrig
        self.newBalanceOrig = newBalanceOrig
        self.nameDest = nameDest
        self.oldBalanceDest = oldBalanceDest
        self.newBalanceDest = newBalanceDest
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.amount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nameOrig = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.oldBalanceOrig = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.newBalanceOrig = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.nameDest = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.oldBalanceDest = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.newBalanceDest = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.timestamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionData')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.DOUBLE, 2)
            oprot.writeDouble(self.amount)
            oprot.writeFieldEnd()
        if self.nameOrig is not None:
            oprot.writeFieldBegin('nameOrig', TType.STRING, 3)
            oprot.writeString(self.nameOrig.encode('utf-8') if sys.version_info[0] == 2 else self.nameOrig)
            oprot.writeFieldEnd()
        if self.oldBalanceOrig is not None:
            oprot.writeFieldBegin('oldBalanceOrig', TType.DOUBLE, 4)
            oprot.writeDouble(self.oldBalanceOrig)
            oprot.writeFieldEnd()
        if self.newBalanceOrig is not None:
            oprot.writeFieldBegin('newBalanceOrig', TType.DOUBLE, 5)
            oprot.writeDouble(self.newBalanceOrig)
            oprot.writeFieldEnd()
        if self.nameDest is not None:
            oprot.writeFieldBegin('nameDest', TType.STRING, 6)
            oprot.writeString(self.nameDest.encode('utf-8') if sys.version_info[0] == 2 else self.nameDest)
            oprot.writeFieldEnd()
        if self.oldBalanceDest is not None:
            oprot.writeFieldBegin('oldBalanceDest', TType.DOUBLE, 7)
            oprot.writeDouble(self.oldBalanceDest)
            oprot.writeFieldEnd()
        if self.newBalanceDest is not None:
            oprot.writeFieldBegin('newBalanceDest', TType.DOUBLE, 8)
            oprot.writeDouble(self.newBalanceDest)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.STRING, 9)
            oprot.writeString(self.timestamp.encode('utf-8') if sys.version_info[0] == 2 else self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FraudPrediction(object):
    """
    Attributes:
     - isFraud
     - fraudProbability
     - featureImportance

    """


    def __init__(self, isFraud=None, fraudProbability=None, featureImportance=None,):
        self.isFraud = isFraud
        self.fraudProbability = fraudProbability
        self.featureImportance = featureImportance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.isFraud = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.fraudProbability = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.featureImportance = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readDouble()
                        self.featureImportance[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FraudPrediction')
        if self.isFraud is not None:
            oprot.writeFieldBegin('isFraud', TType.BOOL, 1)
            oprot.writeBool(self.isFraud)
            oprot.writeFieldEnd()
        if self.fraudProbability is not None:
            oprot.writeFieldBegin('fraudProbability', TType.DOUBLE, 2)
            oprot.writeDouble(self.fraudProbability)
            oprot.writeFieldEnd()
        if self.featureImportance is not None:
            oprot.writeFieldBegin('featureImportance', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.featureImportance))
            for kiter7, viter8 in self.featureImportance.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeDouble(viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EDARequest(object):
    """
    Attributes:
     - dataPath
     - startDate
     - endDate
     - focusFeatures

    """


    def __init__(self, dataPath=None, startDate=None, endDate=None, focusFeatures=None,):
        self.dataPath = dataPath
        self.startDate = startDate
        self.endDate = endDate
        self.focusFeatures = focusFeatures

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.dataPath = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.focusFeatures = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.focusFeatures.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EDARequest')
        if self.dataPath is not None:
            oprot.writeFieldBegin('dataPath', TType.STRING, 1)
            oprot.writeString(self.dataPath.encode('utf-8') if sys.version_info[0] == 2 else self.dataPath)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 2)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 3)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        if self.focusFeatures is not None:
            oprot.writeFieldBegin('focusFeatures', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.focusFeatures))
            for iter15 in self.focusFeatures:
                oprot.writeString(iter15.encode('utf-8') if sys.version_info[0] == 2 else iter15)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FraudAnalysisRequest(object):
    """
    Attributes:
     - transaction
     - prediction
     - fewShotExamples
     - analysisDepth

    """


    def __init__(self, transaction=None, prediction=None, fewShotExamples=None, analysisDepth=None,):
        self.transaction = transaction
        self.prediction = prediction
        self.fewShotExamples = fewShotExamples
        self.analysisDepth = analysisDepth

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.transaction = TransactionData()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.prediction = FraudPrediction()
                    self.prediction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.fewShotExamples = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.fewShotExamples.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.analysisDepth = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FraudAnalysisRequest')
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 1)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        if self.prediction is not None:
            oprot.writeFieldBegin('prediction', TType.STRUCT, 2)
            self.prediction.write(oprot)
            oprot.writeFieldEnd()
        if self.fewShotExamples is not None:
            oprot.writeFieldBegin('fewShotExamples', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.fewShotExamples))
            for iter22 in self.fewShotExamples:
                oprot.writeString(iter22.encode('utf-8') if sys.version_info[0] == 2 else iter22)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.analysisDepth is not None:
            oprot.writeFieldBegin('analysisDepth', TType.STRING, 4)
            oprot.writeString(self.analysisDepth.encode('utf-8') if sys.version_info[0] == 2 else self.analysisDepth)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TransactionData)
TransactionData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'amount', None, None, ),  # 2
    (3, TType.STRING, 'nameOrig', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'oldBalanceOrig', None, None, ),  # 4
    (5, TType.DOUBLE, 'newBalanceOrig', None, None, ),  # 5
    (6, TType.STRING, 'nameDest', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'oldBalanceDest', None, None, ),  # 7
    (8, TType.DOUBLE, 'newBalanceDest', None, None, ),  # 8
    (9, TType.STRING, 'timestamp', 'UTF8', None, ),  # 9
)
all_structs.append(FraudPrediction)
FraudPrediction.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'isFraud', None, None, ),  # 1
    (2, TType.DOUBLE, 'fraudProbability', None, None, ),  # 2
    (3, TType.MAP, 'featureImportance', (TType.STRING, 'UTF8', TType.DOUBLE, None, False), None, ),  # 3
)
all_structs.append(EDARequest)
EDARequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dataPath', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'startDate', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'endDate', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'focusFeatures', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(FraudAnalysisRequest)
FraudAnalysisRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'transaction', [TransactionData, None], None, ),  # 1
    (2, TType.STRUCT, 'prediction', [FraudPrediction, None], None, ),  # 2
    (3, TType.LIST, 'fewShotExamples', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRING, 'analysisDepth', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
